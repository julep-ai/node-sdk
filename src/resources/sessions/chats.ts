// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import * as Core from '../../core';
import * as ChatsAPI from './chats';

export class Chats extends APIResource {
  /**
   * Chat
   */
  create(
    sessionId: string,
    body: ChatCreateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<ChatCreateResponse> {
    return this._client.post(`/sessions/${sessionId}/chat`, { body, ...options });
  }
}

export type ChatCreateResponse =
  | ChatCreateResponse.ChunkChatResponse
  | ChatCreateResponse.MessageChatResponse;

export namespace ChatCreateResponse {
  export interface ChunkChatResponse {
    id: string;

    choices: Array<ChunkChatResponse.Choice>;

    created_at: string;

    docs?: Array<ChunkChatResponse.Doc>;

    jobs?: Array<string>;

    /**
     * Usage statistics for the completion request
     */
    usage?: ChunkChatResponse.Usage | null;
  }

  export namespace ChunkChatResponse {
    /**
     * Streaming chat completion output
     */
    export interface Choice {
      /**
       * The message generated by the model
       */
      delta: Choice.Delta;

      index: number;

      finish_reason?: 'stop' | 'length' | 'content_filter' | 'tool_calls';

      logprobs?: Choice.Logprobs | null;
    }

    export namespace Choice {
      /**
       * The message generated by the model
       */
      export interface Delta {
        content: string | Array<string> | Array<Delta.Content | Delta.ContentModel>;

        role: 'user' | 'assistant' | 'system' | 'function' | 'function_response' | 'function_call' | 'auto';

        continue?: boolean | null;

        name?: string | null;
      }

      export namespace Delta {
        export interface Content {
          text: string;

          type?: 'text';
        }

        export interface ContentModel {
          /**
           * The image URL
           */
          image_url: ContentModel.ImageURL;

          type?: 'image_url';
        }

        export namespace ContentModel {
          /**
           * The image URL
           */
          export interface ImageURL {
            url: string;

            detail?: 'low' | 'high' | 'auto';
          }
        }
      }

      export interface Logprobs {
        content?: Array<Logprobs.Content> | null;
      }

      export namespace Logprobs {
        export interface Content {
          token: string;

          logprob: number;

          top_logprobs: Array<Content.TopLogprob>;

          bytes?: Array<number> | null;
        }

        export namespace Content {
          export interface TopLogprob {
            token: string;

            logprob: number;

            bytes?: Array<number> | null;
          }
        }
      }
    }

    export interface Doc {
      id: string;

      owner: Doc.Owner;

      snippets: Array<Doc.Snippet>;

      distance?: number | null;

      title?: string | null;
    }

    export namespace Doc {
      export interface Owner {
        id: string;

        role: 'user' | 'agent';
      }

      export interface Snippet {
        content: string;

        index: number;
      }
    }

    /**
     * Usage statistics for the completion request
     */
    export interface Usage {
      completion_tokens?: number | null;

      prompt_tokens?: number | null;

      total_tokens?: number | null;
    }
  }

  export interface MessageChatResponse {
    id: string;

    choices: Array<MessageChatResponse.SingleChatOutput | MessageChatResponse.MultipleChatOutput>;

    created_at: string;

    docs?: Array<MessageChatResponse.Doc>;

    jobs?: Array<string>;

    /**
     * Usage statistics for the completion request
     */
    usage?: MessageChatResponse.Usage | null;
  }

  export namespace MessageChatResponse {
    /**
     * The output returned by the model. Note that, depending on the model provider,
     * they might return more than one message.
     */
    export interface SingleChatOutput {
      index: number;

      message: SingleChatOutput.Message;

      finish_reason?: 'stop' | 'length' | 'content_filter' | 'tool_calls';

      logprobs?: SingleChatOutput.Logprobs | null;
    }

    export namespace SingleChatOutput {
      export interface Message {
        content: string | Array<string> | Array<Message.Content | Message.ContentModel>;

        role: 'user' | 'assistant' | 'system' | 'function' | 'function_response' | 'function_call' | 'auto';

        id?: string | null;

        created_at?: string | null;

        name?: string | null;

        tool_calls?: Array<
          | Message.ChosenFunctionCall
          | Message.ChosenIntegrationCall
          | Message.ChosenSystemCall
          | Message.ChosenAPICall
        > | null;
      }

      export namespace Message {
        export interface Content {
          text: string;

          type?: 'text';
        }

        export interface ContentModel {
          /**
           * The image URL
           */
          image_url: ContentModel.ImageURL;

          type?: 'image_url';
        }

        export namespace ContentModel {
          /**
           * The image URL
           */
          export interface ImageURL {
            url: string;

            detail?: 'low' | 'high' | 'auto';
          }
        }

        export interface ChosenFunctionCall {
          id: string;

          function: ChosenFunctionCall.Function;

          type?: 'function';
        }

        export namespace ChosenFunctionCall {
          export interface Function {
            name: string;
          }
        }

        export interface ChosenIntegrationCall {
          id: string;

          integration: unknown;

          type?: 'integration';
        }

        export interface ChosenSystemCall {
          id: string;

          system: unknown;

          type?: 'system';
        }

        export interface ChosenAPICall {
          id: string;

          api_call: unknown;

          type?: 'api_call';
        }
      }

      export interface Logprobs {
        content?: Array<Logprobs.Content> | null;
      }

      export namespace Logprobs {
        export interface Content {
          token: string;

          logprob: number;

          top_logprobs: Array<Content.TopLogprob>;

          bytes?: Array<number> | null;
        }

        export namespace Content {
          export interface TopLogprob {
            token: string;

            logprob: number;

            bytes?: Array<number> | null;
          }
        }
      }
    }

    /**
     * The output returned by the model. Note that, depending on the model provider,
     * they might return more than one message.
     */
    export interface MultipleChatOutput {
      index: number;

      messages: Array<MultipleChatOutput.Message>;

      finish_reason?: 'stop' | 'length' | 'content_filter' | 'tool_calls';

      logprobs?: MultipleChatOutput.Logprobs | null;
    }

    export namespace MultipleChatOutput {
      export interface Message {
        content: string | Array<string> | Array<Message.Content | Message.ContentModel>;

        role: 'user' | 'assistant' | 'system' | 'function' | 'function_response' | 'function_call' | 'auto';

        id?: string | null;

        created_at?: string | null;

        name?: string | null;

        tool_calls?: Array<
          | Message.ChosenFunctionCall
          | Message.ChosenIntegrationCall
          | Message.ChosenSystemCall
          | Message.ChosenAPICall
        > | null;
      }

      export namespace Message {
        export interface Content {
          text: string;

          type?: 'text';
        }

        export interface ContentModel {
          /**
           * The image URL
           */
          image_url: ContentModel.ImageURL;

          type?: 'image_url';
        }

        export namespace ContentModel {
          /**
           * The image URL
           */
          export interface ImageURL {
            url: string;

            detail?: 'low' | 'high' | 'auto';
          }
        }

        export interface ChosenFunctionCall {
          id: string;

          function: ChosenFunctionCall.Function;

          type?: 'function';
        }

        export namespace ChosenFunctionCall {
          export interface Function {
            name: string;
          }
        }

        export interface ChosenIntegrationCall {
          id: string;

          integration: unknown;

          type?: 'integration';
        }

        export interface ChosenSystemCall {
          id: string;

          system: unknown;

          type?: 'system';
        }

        export interface ChosenAPICall {
          id: string;

          api_call: unknown;

          type?: 'api_call';
        }
      }

      export interface Logprobs {
        content?: Array<Logprobs.Content> | null;
      }

      export namespace Logprobs {
        export interface Content {
          token: string;

          logprob: number;

          top_logprobs: Array<Content.TopLogprob>;

          bytes?: Array<number> | null;
        }

        export namespace Content {
          export interface TopLogprob {
            token: string;

            logprob: number;

            bytes?: Array<number> | null;
          }
        }
      }
    }

    export interface Doc {
      id: string;

      owner: Doc.Owner;

      snippets: Array<Doc.Snippet>;

      distance?: number | null;

      title?: string | null;
    }

    export namespace Doc {
      export interface Owner {
        id: string;

        role: 'user' | 'agent';
      }

      export interface Snippet {
        content: string;

        index: number;
      }
    }

    /**
     * Usage statistics for the completion request
     */
    export interface Usage {
      completion_tokens?: number | null;

      prompt_tokens?: number | null;

      total_tokens?: number | null;
    }
  }
}

export interface ChatCreateParams {
  messages: Array<ChatCreateParams.Message>;

  agent?: string | null;

  frequency_penalty?: number | null;

  length_penalty?: number | null;

  logit_bias?: Record<string, number> | null;

  max_tokens?: number | null;

  min_p?: number | null;

  model?: string | null;

  presence_penalty?: number | null;

  recall?: boolean;

  repetition_penalty?: number | null;

  response_format?:
    | ChatCreateParams.SimpleCompletionResponseFormat
    | ChatCreateParams.SchemaCompletionResponseFormat
    | null;

  save?: boolean;

  seed?: number | null;

  stop?: Array<string>;

  stream?: boolean;

  temperature?: number | null;

  tool_choice?:
    | 'auto'
    | 'none'
    | ChatCreateParams.NamedFunctionChoice
    | ChatCreateParams.NamedIntegrationChoice
    | ChatCreateParams.NamedSystemChoice
    | ChatCreateParams.NamedAPICallChoice
    | null;

  tools?: Array<ChatCreateParams.Tool>;

  top_p?: number | null;
}

export namespace ChatCreateParams {
  export interface Message {
    content: string | Array<string> | Array<Message.Content | Message.ContentModel>;

    role: 'user' | 'assistant' | 'system' | 'function' | 'function_response' | 'function_call' | 'auto';

    continue?: boolean | null;

    name?: string | null;
  }

  export namespace Message {
    export interface Content {
      text: string;

      type?: 'text';
    }

    export interface ContentModel {
      /**
       * The image URL
       */
      image_url: ContentModel.ImageURL;

      type?: 'image_url';
    }

    export namespace ContentModel {
      /**
       * The image URL
       */
      export interface ImageURL {
        url: string;

        detail?: 'low' | 'high' | 'auto';
      }
    }
  }

  export interface SimpleCompletionResponseFormat {
    type?: 'text' | 'json_object';
  }

  export interface SchemaCompletionResponseFormat {
    json_schema: unknown;

    type?: 'json_schema';
  }

  export interface NamedFunctionChoice {
    function: NamedFunctionChoice.Function;
  }

  export namespace NamedFunctionChoice {
    export interface Function {
      name: string;
    }
  }

  export interface NamedIntegrationChoice {
    integration?: unknown | null;
  }

  export interface NamedSystemChoice {
    system?: unknown | null;
  }

  export interface NamedAPICallChoice {
    api_call?: unknown | null;
  }

  export interface Tool {
    /**
     * Function definition
     */
    function: Tool.Function;

    name: string;

    api_call?: unknown | null;

    integration?: unknown | null;

    system?: unknown | null;

    type?: 'function' | 'integration' | 'system' | 'api_call';
  }

  export namespace Tool {
    /**
     * Function definition
     */
    export interface Function {
      description?: string | null;

      name?: unknown | null;

      parameters?: unknown | null;
    }
  }
}

export namespace Chats {
  export import ChatCreateResponse = ChatsAPI.ChatCreateResponse;
  export import ChatCreateParams = ChatsAPI.ChatCreateParams;
}
